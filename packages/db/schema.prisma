generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models
model organizations {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String   @db.VarChar(255)
  slug       String   @unique @db.VarChar(100)
  owner_id   String   @unique @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  owner              users                @relation("OrganizationOwner", fields: [owner_id], references: [id], onDelete: Restrict)
  flags              feature_flags[]
  user_organizations user_organizations[]
  invitations        invitations[]
  audit_logs         audit_logs[]         @relation("OrgAuditLogs")
  kill_switches      kill_switches[]
  metrics            metrics[]
  slackIntegration   SlackIntegration[]
  alert_preferences  alert_preferences?

  @@index([slug])
}

model users {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String    @unique @db.VarChar(255)
  name       String    @db.VarChar(255)
  role       user_role @default(MEMBER)
  password   String?
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)
  is_active  Boolean   @default(true)
  isVerified Boolean   @default(false)

  // Relations
  owned_organization      organizations?           @relation("OrganizationOwner")
  user_organizations      user_organizations?
  created_flags           feature_flags[]          @relation("FlagCreator")
  audit_logs              audit_logs[]
  sent_invitations        invitations[]
  owned_members           owner_members[]          @relation("OwnerMembers")
  member_of_owner         owner_members[]          @relation("MemberOfOwner")
  emailVerificationToken  emailVerificationToken[]
  created_kill_switches   kill_switches[]          @relation("KillSwitchCreator")
  activated_kill_switches kill_switches[]          @relation("KillSwitchActivator")
}

model emailVerificationToken {
  token_id   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  token      String   @unique
  expiration DateTime
  user       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model user_organizations {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @unique @db.Uuid
  organization_id String    @db.Uuid
  role            user_role @default(MEMBER)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  user         users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  @@index([organization_id, role])
}

// Owner-Member relationship (hierarchical structure)
model owner_members {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id   String   @db.Uuid
  member_id  String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  owner  users @relation("OwnerMembers", fields: [owner_id], references: [id], onDelete: Cascade)
  member users @relation("MemberOfOwner", fields: [member_id], references: [id], onDelete: Cascade)

  @@unique([owner_id, member_id])
  @@index([owner_id])
  @@index([member_id])
}

// Invitation system
model invitations {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String    @db.VarChar(255)
  token           String    @unique @db.VarChar(255)
  organization_id String    @db.Uuid
  invited_by      String    @db.Uuid
  role            user_role @default(MEMBER)
  expires_at      DateTime  @db.Timestamptz(6)
  is_used         Boolean   @default(false)
  used_at         DateTime? @db.Timestamptz(6)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  inviter      users         @relation(fields: [invited_by], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email, organization_id])
  @@index([expires_at, is_used])
}

// Main Feature Flag Model
model feature_flags {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String    @db.Uuid
  name            String    @db.VarChar(255)
  key             String    @db.VarChar(255)
  description     String?
  flag_type       flag_type
  is_active       Boolean   @default(true)
  created_by      String    @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  tags            String[]  @default([])

  organization         organizations       @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator              users               @relation("FlagCreator", fields: [created_by], references: [id])
  environments         flag_environments[]
  evaluations          flag_evaluations[]
  kill_switch_mappings kill_switch_flags[]

  @@unique([organization_id, key])
  @@index([organization_id, key])
  @@index([organization_id, flag_type])
}

// Environment-specific flag configuration
model flag_environments {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_id       String           @db.Uuid
  environment   environment_type
  value         Json
  default_value Json
  is_enabled    Boolean          @default(true)
  created_at    DateTime         @default(now()) @db.Timestamptz(6)
  updated_at    DateTime         @default(now()) @db.Timestamptz(6)

  // Relations
  flag    feature_flags @relation(fields: [flag_id], references: [id], onDelete: Cascade)
  rules   flag_rules[]
  rollout flag_rollout?
  metrics metrics[]

  @@unique([flag_id, environment])
  @@index([flag_id, environment])
}

// Targeting rules (works for all flag types)
model flag_rules {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_environment_id String   @db.Uuid
  name                String   @db.VarChar(255)
  description         String?
  conditions          Json     @default("{}")
  is_enabled          Boolean  @default(false)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  flag_environment flag_environments @relation(fields: [flag_environment_id], references: [id], onDelete: Cascade)

  @@index([flag_environment_id, is_enabled])
}

model flag_rollout {
  id                       String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_environment_id      String            @unique @db.Uuid
  type                     rollout_type
  config                   Json
  created_at               DateTime          @default(now()) @db.Timestamptz(6)
  updated_at               DateTime          @default(now()) @db.Timestamptz(6)
  flag_rollout_environment flag_environments @relation(fields: [flag_environment_id], references: [id], onDelete: Cascade)
}

// Flag evaluation results (caching and analytics)
model flag_evaluations {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_id       String           @db.Uuid
  environment   environment_type
  value         Json
  user_context  Json             @default("{}")
  rules_matched Json
  evaluated_at  DateTime         @default(now()) @db.Timestamptz(6)

  // Relations
  flag feature_flags @relation(fields: [flag_id], references: [id], onDelete: Cascade)

  @@index([flag_id, environment])
  @@index([flag_id, environment, evaluated_at])
}

model metric_events {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metric_id  String @db.Uuid
  metric_key String @db.VarChar(255)

  // Feature flag context
  part_rollout     Boolean @default(false)
  variation_served String? @db.VarChar(255) // for A/B testing or multivariate

  // Event type - determines which fields are populated
  event_type metric_event_type

  // Flexible data storage based on event type
  numeric_value   Float? // for NUMERIC metrics only
  conversion_step conversion_step_type? // for CONVERSION metrics only
  // Note: COUNT metrics don't need a value field - each event = +1

  // Metadata
  timestamp DateTime @default(now()) @db.Timestamptz(6)
  context   Json? // additional context data

  // Relations  
  metric metrics @relation(fields: [metric_id], references: [id], onDelete: Cascade)

  @@index([metric_key, timestamp])
  @@index([metric_key, event_type, timestamp])
  @@index([metric_key, part_rollout, variation_served])
}

// Aggregated results table - stores computed metrics
model metric_aggregations {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metric_id  String @db.Uuid
  metric_key String @db.VarChar(255) // for convenience

  // Feature flag context for this aggregation
  part_rollout     Boolean? // null means all data, true/false means filtered
  variation_served String? // null means all variations, specific value means filtered

  // Time window for this aggregation
  window_start DateTime @db.Timestamptz(6)
  window_end   DateTime @db.Timestamptz(6)

  // Aggregated values based on metric type
  total_events Int @default(0)

  // For CONVERSION metrics
  encounters      Int? // number of users who encountered
  conversions     Int? // number who converted
  conversion_rate Float? // calculated rate

  // For COUNT metrics
  count_total Int? // sum of all count events

  // For NUMERIC metrics  
  numeric_sum Float?
  numeric_avg Float?
  numeric_p50 Float?
  numeric_p75 Float?
  numeric_p90 Float?
  numeric_p95 Float?
  numeric_p99 Float?
  numeric_min Float?
  numeric_max Float?

  created_at DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  metric metrics @relation(fields: [metric_id], references: [id], onDelete: Cascade)

  @@unique([metric_id, window_start, window_end, part_rollout, variation_served])
  @@index([metric_id, window_start])
}

// Updated main metrics model
model metrics {
  id                  String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id     String      @db.Uuid
  flag_environment_id String      @db.Uuid
  metric_name         String      @db.VarChar(255)
  metric_key          String      @db.VarChar(255)
  metric_type         metric_type

  is_active Boolean @default(true)

  aggregation_window Int                       @default(300) // seconds
  unit_measurement   String?
  aggregation_method metric_aggregation_method
  description        String?                   @db.Text
  created_at         DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at         DateTime                  @default(now()) @db.Timestamptz(6)
  tags               String[]                  @default([])
  // Relations
  organization       organizations             @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  flag_environment   flag_environments?        @relation(fields: [flag_environment_id], references: [id], onDelete: Cascade)

  // New relations - now using metric_id instead of metric_key
  metric_events       metric_events[]
  metric_aggregations metric_aggregations[]
  metric_setup        alert_metric?
  triggered_alerts    triggered_alerts[]

  @@unique([organization_id, metric_key])
  @@index([organization_id, metric_type])
  @@index([flag_environment_id, metric_type])
}

model alert_preferences {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organisation_id String        @db.Uuid()
  frequency_unit  FrequencyUnit
  frequency_value Int
  number_of_times Int

  email_enabled            Boolean     @default(true)
  slack_enabled            Boolean     @default(false)
  email_roles_notification user_role[] @default([ADMIN, OWNER])

  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @default(now()) @db.Timestamptz(6)
  organisation organizations @relation(fields: [organisation_id], references: [id])

  @@unique([organisation_id])
}

model SlackIntegration {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organisation_id String   @db.Uuid
  team_id         String   @unique // Slack workspace ID
  team_name       String // Workspace name
  bot_token       String // Bot token for sending messages
  user_id         String? // User who installed the app
  scope           String // Permissions granted
  installed_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  is_active       Boolean  @default(true)

  // Relations
  organisation organizations  @relation(fields: [organisation_id], references: [id], onDelete: Cascade)
  channels     SlackChannel[]

  @@index([organisation_id])
  @@index([team_id])
}

model SlackChannel {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slack_integration_id String   @db.Uuid
  channel_id           String // Slack channel ID (C1234567890)
  channel_name         String // Channel name (#general)
  is_private           Boolean  @default(false)
  is_active            Boolean  @default(true)
  added_at             DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  slack_integration SlackIntegration @relation(fields: [slack_integration_id], references: [id], onDelete: Cascade)

  @@unique([slack_integration_id, channel_id])
  @@index([slack_integration_id])
}

model alert_metric {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metric_id    String         @unique @db.Uuid()
  operator     alert_operator
  threshold    Float
  is_enabled   Boolean        @default(true)
  metric_setup metrics        @relation(fields: [metric_id], references: [id])
}

model triggered_alerts {
  id              String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  metric_id       String       @db.Uuid()
  current_value   Float
  threshold_value Float
  alert_status    alert_status @default(TRIGGERED)
  resolved_at     DateTime?    @db.Timestamptz(6)
  acknowledged_at DateTime?    @db.Timestamptz(6)

  created_at   DateTime @default(now()) @db.Timestamptz(6)
  metric_setup metrics  @relation(fields: [metric_id], references: [id])
}

// Unified audit log
model audit_logs {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organisation_id    String?             @db.Uuid
  user_id            String?             @db.Uuid
  action             audit_action
  resource_type      audit_resource_type
  resource_id        String?             @db.Uuid
  attributes_changed Json?
  environment        environment_type?
  ip_address         String?             @db.Inet
  user_agent         String?             @db.Text
  created_at         DateTime            @default(now()) @db.Timestamptz(6)

  // Relations
  org  organizations? @relation("OrgAuditLogs", fields: [organisation_id], references: [id])
  user users?         @relation(fields: [user_id], references: [id])

  @@index([organisation_id, created_at])
  @@index([user_id, created_at])
  @@index([action, created_at])
  @@index([resource_type, created_at])
}

model kill_switches {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String    @db.Uuid
  name            String    @db.VarChar(255)
  killSwitchKey   String    @db.VarChar(255)
  description     String?   @db.Text
  is_active       Boolean   @default(false)
  created_by      String    @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  activated_at    DateTime? @db.Timestamptz(6)
  activated_by    String?   @db.Uuid

  // Relations
  organization  organizations       @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator       users               @relation("KillSwitchCreator", fields: [created_by], references: [id])
  activator     users?              @relation("KillSwitchActivator", fields: [activated_by], references: [id])
  flag_mappings kill_switch_flags[]

  @@unique([organization_id, killSwitchKey])
  @@index([organization_id, is_active])
  @@index([organization_id, created_at])
}

// Junction table for kill switch to flag mappings with environment specificity
model kill_switch_flags {
  id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kill_switch_id String             @db.Uuid
  flag_id        String             @db.Uuid
  environments   environment_type[] @default([])
  created_at     DateTime           @default(now()) @db.Timestamptz(6)

  // Relations
  kill_switch kill_switches @relation(fields: [kill_switch_id], references: [id], onDelete: Cascade)
  flag        feature_flags @relation(fields: [flag_id], references: [id], onDelete: Cascade)

  @@unique([kill_switch_id, flag_id])
  @@index([kill_switch_id, flag_id])
  @@index([flag_id])
}

// Enums
enum flag_type {
  BOOLEAN
  STRING
  NUMBER
  JSON
  AB_TEST
  MULTIVARIATE
}

enum alert_status {
  TRIGGERED
  ACKNOWLEDGED
  RESOLVED
}

enum environment_type {
  DEV
  STAGING
  PROD
  TEST
}

enum user_role {
  ADMIN
  MEMBER
  VIEWER
  OWNER
}

enum FrequencyUnit {
  MINUTES
  HOURS
  DAYS
}

enum alert_operator {
  EQUALS_TO
  GREATER_THAN
  LESS_THAN
}

enum metric_aggregation_method {
  SUM
  AVERAGE
  P99
  P90
  P95
  P75
  P50
}

enum rollout_type {
  PERCENTAGE
  PROGRESSIVE_ROLLOUT
  CUSTOM_PROGRESSIVE_ROLLOUT
}

enum audit_action {
  CREATE
  UPDATE
  DELETE
  ENABLE
  DISABLE
  EVALUATE
  ALERT_TRIGGERED
  ALERT_ACKNOWLEDGED
  ALERT_RESOLVED
}

enum audit_resource_type {
  KILL_SWITCHES
  KILL_SWITCH_FLAG
  FEATURE_FLAG
  FLAG_ENVIRONMENT
  FLAG_RULE
  ORGANIZATION_ATTRIBUTE
  FLAG_ROLLOUT
  METRIC
  ALERT
  ALERT_PREFERENCE
}

enum attribute_data_type {
  STRING
  NUMBER
  BOOLEAN
  DATE
  SEMVER
  ARRAY
}

// New enums for monitoring and alerting
enum metric_type {
  CONVERSION
  COUNT
  NUMERIC
}

enum metric_event_type {
  COUNT_INCREMENT
  NUMERIC_VALUE
  CONVERSION_ENCOUNTER
  CONVERSION_SUCCESS
}

enum conversion_step_type {
  ENCOUNTER
  SUCCESS
}
