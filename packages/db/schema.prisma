generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models
model organizations {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String         @db.VarChar(255)
  slug         String         @unique @db.VarChar(100)
  owner_id     String         @db.Uuid
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @db.Timestamptz(6)
  
  // Relations
  owner            users                  @relation("OrganizationOwner", fields: [owner_id], references: [id], onDelete: Restrict)
  flags            feature_flags[]
  user_organizations user_organizations[]
  invitations      invitations[]
  
  @@index([owner_id])
  @@index([slug])
}

model users {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  name        String        @db.VarChar(255)
  role        user_role     @default(MEMBER)
  password    String?
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  updated_at  DateTime      @default(now()) @db.Timestamptz(6)
  is_active   Boolean       @default(true)
  isVerified  Boolean       @default(false)
  // Relations
  owned_organizations organizations[]      @relation("OrganizationOwner")
  user_organizations  user_organizations[]
  created_flags       feature_flags[]      @relation("FlagCreator")
  audit_logs          audit_logs[]
  sent_invitations    invitations[]
  owned_members       owner_members[]      @relation("OwnerMembers")
  member_of_owner     owner_members[]      @relation("MemberOfOwner")
  emailVerificationToken emailVerificationToken?
}

model emailVerificationToken {
  token_id   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String      @unique @db.Uuid
  token      String      @unique
  expiration DateTime
  user       users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  @@index([user_id])
}

model user_organizations {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String        @db.Uuid
  organization_id String        @db.Uuid
  role            user_role     @default(MEMBER)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  
  // Relations
  user         users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, organization_id])
  @@index([organization_id, role])
}

// Owner-Member relationship (hierarchical structure)
model owner_members {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  owner_id   String    @db.Uuid
  member_id  String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  
  // Relations
  owner      users     @relation("OwnerMembers", fields: [owner_id], references: [id], onDelete: Cascade)
  member     users     @relation("MemberOfOwner", fields: [member_id], references: [id], onDelete: Cascade)

  @@unique([owner_id, member_id])
  @@index([owner_id])
  @@index([member_id])
}

// Invitation system
model invitations {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String        @db.VarChar(255)
  token           String        @unique @db.VarChar(255)
  organization_id String        @db.Uuid
  invited_by      String        @db.Uuid
  role            user_role     @default(MEMBER)
  expires_at      DateTime      @db.Timestamptz(6)
  is_used         Boolean       @default(false)
  used_at         DateTime?     @db.Timestamptz(6)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  
  // Relations
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  inviter      users         @relation(fields: [invited_by], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([email, organization_id])
  @@index([expires_at, is_used])
}

// Main Feature Flag Model
model feature_flags {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organization_id String        @db.Uuid
  name            String        @db.VarChar(255)
  key             String        @db.VarChar(255)
  description     String?
  flag_type       flag_type
  is_active       Boolean       @default(true)
  created_by      String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  tags            String[]      @default([])
  
  // Unified Configuration - All flag-specific data stored here
  config          Json          @default("{}")
  
  // Relations
  organization    organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  creator         users         @relation("FlagCreator", fields: [created_by], references: [id])
  environments    flag_environments[]
  evaluations     flag_evaluations[]
  audit_logs      audit_logs[]
  
  @@unique([organization_id, key])
  @@index([organization_id, key])
  @@index([organization_id, flag_type])
}

// Environment-specific flag configuration
model flag_environments {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_id     String           @db.Uuid
  environment environment_type
  is_enabled  Boolean          @default(false)
  
  // Unified configuration for all flag types in this environment
  config      Json             @default("{}")
  
  created_at  DateTime         @default(now()) @db.Timestamptz(6)
  updated_at  DateTime         @default(now()) @db.Timestamptz(6)
  
  // Relations
  flag        feature_flags    @relation(fields: [flag_id], references: [id], onDelete: Cascade)
  rules       flag_rules[]
  
  @@unique([flag_id, environment])
  @@index([flag_id, environment])
}

// Targeting rules (works for all flag types)
model flag_rules {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_environment_id String            @db.Uuid
  name                String            @db.VarChar(255)
  description         String?
  
  // Rule conditions (user attributes, segments, etc.)
  conditions          Json              @default("{}")
  
  // Value to return when rule matches (works for all flag types)
  value               Json
  
  // Rule priority (higher = evaluated first)
  priority            Int               @default(0)
  is_enabled          Boolean           @default(true)
  
  created_at          DateTime          @default(now()) @db.Timestamptz(6)
  updated_at          DateTime          @default(now()) @db.Timestamptz(6)
  
  // Relations
  flag_environment    flag_environments @relation(fields: [flag_environment_id], references: [id], onDelete: Cascade)
  
  @@index([flag_environment_id, priority])
  @@index([flag_environment_id, is_enabled])
}

// Flag evaluation results (caching and analytics)
model flag_evaluations {
  id              String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_id         String           @db.Uuid
  user_identifier String           @db.VarChar(255)
  environment     environment_type
  
  // The evaluated result
  value           Json
  
  // Metadata about the evaluation
  reason          String           @db.VarChar(100)  // "rule_match", "default", "percentage", etc.
  rule_id         String?          @db.Uuid
  variant         String?          @db.VarChar(100)  // For AB tests
  
  evaluated_at    DateTime         @default(now()) @db.Timestamptz(6)
  expires_at      DateTime?        @db.Timestamptz(6)
  
  // Relations
  flag            feature_flags    @relation(fields: [flag_id], references: [id], onDelete: Cascade)
  
  @@index([flag_id, user_identifier, environment])
  @@index([flag_id, environment, evaluated_at])
  @@index([expires_at])
}

// Unified audit log
model audit_logs {
  id            String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  flag_id       String?           @db.Uuid
  user_id       String?           @db.Uuid
  action        audit_action
  resource_type String            @db.VarChar(50)   // "flag", "environment", "rule"
  resource_id   String?           @db.Uuid
  old_value     Json?
  new_value     Json?
  environment   environment_type?
  ip_address    String?           @db.Inet
  user_agent    String?
  created_at    DateTime          @default(now()) @db.Timestamptz(6)
  
  // Relations
  flag          feature_flags?    @relation(fields: [flag_id], references: [id])
  user          users?            @relation(fields: [user_id], references: [id])
  
  @@index([flag_id, created_at])
  @@index([user_id, created_at])
  @@index([action, created_at])
}

// Enums
enum flag_type {
  BOOLEAN
  PERCENTAGE
  AB_TEST  
  KILL_SWITCH
  MULTIVARIATE    // New: for more than 2 variants
}

enum environment_type {
  DEV
  STAGING
  PROD
}

enum user_role {
  ADMIN
  MEMBER
  VIEWER
  OWNER
}

enum audit_action {
  CREATE
  UPDATE
  DELETE
  ENABLE
  DISABLE
  EVALUATE
}